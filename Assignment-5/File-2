#include <iostream>
using namespace std;

// Node structure for circular linked list
struct Node {
    int data;
    Node* next;
};

// Class representing the circular linked list
class CircularLinkedList {
private:
    Node* head;

public:
    CircularLinkedList() {
        head = nullptr;
    }

    // Function to insert at the beginning
    void insertBeginning(int value) {
        Node* newNode = new Node();
        newNode->data = value;

        if (head == nullptr) {
            newNode->next = newNode;  // Point to itself if the list is empty
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;  // Traverse till the last node (which points to head)
            }
            temp->next = newNode;
            newNode->next = head;
            head = newNode;
        }
    }

    // Function to insert at the end
    void insertEnd(int value) {
        Node* newNode = new Node();
        newNode->data = value;

        if (head == nullptr) {
            newNode->next = newNode;  // Point to itself if the list is empty
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;  // Traverse till the last node
            }
            temp->next = newNode;
            newNode->next = head;  // Make the new node point to the head
        }
    }

    // Function to insert at a specific position
    void insertPosition(int value, int pos) {
        if (pos <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* newNode = new Node();
        newNode->data = value;

        if (pos == 1) {
            insertBeginning(value);  // Insert at the beginning if position is 1
            return;
        }

        Node* temp = head;
        int count = 1;

        while (temp != nullptr && count < pos - 1) {
            temp = temp->next;
            count++;
            if (temp == head) break;  // If we've looped back to head, end the loop
        }

        if (temp == nullptr || temp->next == head) {
            cout << "Position out of range" << endl;
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }

    // Function to delete from the beginning
    void deleteBeginning() {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        if (head->next == head) {
            delete head;
            head = nullptr;
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = head->next;
            delete head;
            head = temp->next;
        }
    }

    // Function to delete from the end
    void deleteEnd() {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        if (head->next == head) {
            delete head;
            head = nullptr;
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = head->next;
            delete head;
            head = temp->next;
        }
    }

    // Function to delete from a specific position
    void deletePosition(int pos) {
        if (head == nullptr || pos <= 0) {
            cout << "Invalid position or empty list!" << endl;
            return;
        }

        if (pos == 1) {
            deleteBeginning();  // Delete from the beginning
            return;
        }

        Node* temp = head;
        int count = 1;

        while (temp != nullptr && count < pos - 1) {
            temp = temp->next;
            count++;
            if (temp == head) break;  // If we've looped back to head, end the loop
        }

        if (temp == nullptr || temp->next == head) {
            cout << "Position out of range" << endl;
            return;
        }

        Node* toDelete = temp->next;
        temp->next = toDelete->next;
        delete toDelete;
    }

    // Function to search for a value
    void search(int value) {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        Node* temp = head;
        do {
            if (temp->data == value) {
                cout << value << " found in the list." << endl;
                return;
            }
            temp = temp->next;
        } while (temp != head);

        cout << value << " not found in the list." << endl;
    }

    // Function to display the list
    void display() {
        if (head == nullptr) {
            cout << "List is empty" << endl;
            return;
        }

        Node* temp = head;
        cout << "List: ";
        do {
            cout << temp->data << " ";
            temp = temp->next;
        } while (temp != head);
        cout << endl;
    }

    // Destructor to free memory
    ~CircularLinkedList() {
        while (head != nullptr) {
            deleteBeginning();
        }
    }
};

int main() {
    CircularLinkedList list;
    int choice, value, pos;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert Beginning\n";
        cout << "2. Insert End\n";
        cout << "3. Insert Position\n";
        cout << "4. Delete Beginning\n";
        cout << "5. Delete End\n";
        cout << "6. Delete Position\n";
        cout << "7. Search\n";
        cout << "8. Display\n";
        cout << "9. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value: ";
                cin >> value;
                list.insertBeginning(value);
                break;
            case 2:
                cout << "Enter value: ";
                cin >> value;
                list.insertEnd(value);
                break;
            case 3:
                cout << "Enter value and position: ";
                cin >> value >> pos;
                list.insertPosition(value, pos);
                break;
            case 4:
                list.deleteBeginning();
                break;
            case 5:
                list.deleteEnd();
                break;
            case 6:
                cout << "Enter position: ";
                cin >> pos;
                list.deletePosition(pos);
                break;
            case 7:
                cout << "Enter value to search: ";
                cin >> value;
                list.search(value);
                break;
            case 8:
                list.display();
                break;
            case 9:
                cout << "Exiting...\n";
                break;
            default:
                cout << "Invalid choice, please try again.\n";
        }
    } while (choice != 9);

    return 0;
}
