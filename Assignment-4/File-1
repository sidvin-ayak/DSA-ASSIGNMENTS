#ifndef LIST_H
#define LIST_H

#include <iostream>
using namespace std;

// -----------------------------------------------------------------------------
// Node structure representing a single element in the linked list
// -----------------------------------------------------------------------------
struct Node {
    int data;       // Data part storing the integer value
    Node* next;     // Pointer to the next node in the list
};

// -----------------------------------------------------------------------------
// List class implementing a singly linked list with ascending insertion
// and a static merge function
// -----------------------------------------------------------------------------
class List {
private:
    Node* head;  // Pointer to the head (start) of the list

    // -------------------------------------------------------------------------
    // Private method to provide access to the head pointer internally
    // -------------------------------------------------------------------------
    Node* getHead() {
        return head;
    }

public:
    // -------------------------------------------------------------------------
    // Constructor: Initializes an empty list by setting head to nullptr
    // -------------------------------------------------------------------------
    List() {
        head = nullptr;
    }

    // -------------------------------------------------------------------------
    // Function: insertAscending
    // Inserts a new node with the given value into the list in ascending order
    // -------------------------------------------------------------------------
    void insertAscending(int value) {
        Node* newNode = new Node();  // Dynamically allocate new node
        newNode->data = value;
        newNode->next = nullptr;

        // Case 1: Insert at the beginning if list is empty or head's data is larger
        if (head == nullptr || head->data >= value) {
            newNode->next = head;
            head = newNode;
        } 
        // Case 2: Find the correct position in the list to insert the new node
        else {
            Node* temp = head;
            while (temp->next != nullptr && temp->next->data < value) {
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        cout << "Inserted " << value << " in ascending order." << endl;
    }

    // -------------------------------------------------------------------------
    // Static Function: merge
    // Merges two sorted lists (list1 and list2) into a new merged list
    // maintaining ascending order, and returns the merged list
    // -------------------------------------------------------------------------
    static List merge(List& list1, List& list2) {
        List mergedList;                  // Create a new list to store the result
        Node* temp1 = list1.getHead();    // Pointer to traverse list1
        Node* temp2 = list2.getHead();    // Pointer to traverse list2

        // Traverse both lists and insert the smaller element into mergedList
        while (temp1 != nullptr && temp2 != nullptr) {
            if (temp1->data <= temp2->data) {
                mergedList.insertAscending(temp1->data);
                temp1 = temp1->next;
            } else {
                mergedList.insertAscending(temp2->data);
                temp2 = temp2->next;
            }
        }

        // Insert any remaining elements from list1
        while (temp1 != nullptr) {
            mergedList.insertAscending(temp1->data);
            temp1 = temp1->next;
        }

        // Insert any remaining elements from list2
        while (temp2 != nullptr) {
            mergedList.insertAscending(temp2->data);
            temp2 = temp2->next;
        }

        return mergedList;  // Return the merged sorted list
    }

    // -------------------------------------------------------------------------
    // Function: display
    // Prints the elements of the list in order to the console
    // -------------------------------------------------------------------------
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        cout << "List elements: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // -------------------------------------------------------------------------
    // Destructor: Frees all dynamically allocated nodes when the list is destroyed
    // -------------------------------------------------------------------------
    ~List() {
        Node* temp = head;
        while (temp != nullptr) {
            Node* toDelete = temp;
            temp = temp->next;
            delete toDelete;
        }
    }
};

#endif  // LIST_H
