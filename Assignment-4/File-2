#include <iostream>
using namespace std;

// -----------------------------------------------------------------------------
// Node structure: represents a single element in the linked list
// -----------------------------------------------------------------------------
struct Node {
    int data;       // Data value
    Node* next;     // Pointer to the next node
};

// -----------------------------------------------------------------------------
// LinkedList class: Implements a singly linked list with various operations
// -----------------------------------------------------------------------------
class LinkedList {
private:
    Node* head;     // Pointer to the start (head) of the list

public:
    // -------------------------------------------------------------------------
    // Constructor: Initializes the linked list as empty
    // -------------------------------------------------------------------------
    LinkedList() {
        head = nullptr;
    }

    // -------------------------------------------------------------------------
    // Inserts a new node at the beginning of the list
    // -------------------------------------------------------------------------
    void insertBeginning(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << value << " at the beginning." << endl;
    }

    // -------------------------------------------------------------------------
    // Inserts a new node at the end of the list
    // -------------------------------------------------------------------------
    void insertEnd(int value) {
        Node* newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
        cout << "Inserted " << value << " at the end." << endl;
    }

    // -------------------------------------------------------------------------
    // Inserts a new node at the specified position (1-based indexing)
    // -------------------------------------------------------------------------
    void insertPosition(int value, int position) {
        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }

        Node* newNode = new Node();
        newNode->data = value;

        if (position == 1) {
            newNode->next = head;
            head = newNode;
            cout << "Inserted " << value << " at position " << position << "." << endl;
            return;
        }

        Node* temp = head;
        for (int i = 1; i < position - 1; ++i) {
            if (temp == nullptr) {
                cout << "Position out of bounds!" << endl;
                return;
            }
            temp = temp->next;
        }

        newNode->next = temp->next;
        temp->next = newNode;
        cout << "Inserted " << value << " at position " << position << "." << endl;
    }

    // -------------------------------------------------------------------------
    // Deletes the first node of the list
    // -------------------------------------------------------------------------
    void deleteBeginning() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
        cout << "Deleted the first element." << endl;
    }

    // -------------------------------------------------------------------------
    // Deletes the last node of the list
    // -------------------------------------------------------------------------
    void deleteEnd() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        if (head->next == nullptr) {
            delete head;
            head = nullptr;
            cout << "Deleted the last element." << endl;
            return;
        }

        Node* temp = head;
        while (temp->next->next != nullptr) {
            temp = temp->next;
        }
        delete temp->next;
        temp->next = nullptr;
        cout << "Deleted the last element." << endl;
    }

    // -------------------------------------------------------------------------
    // Deletes the node at the specified position (1-based indexing)
    // -------------------------------------------------------------------------
    void deletePosition(int position) {
        if (position <= 0) {
            cout << "Invalid position!" << endl;
            return;
        }
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }

        if (position == 1) {
            Node* temp = head;
            head = head->next;
            delete temp;
            cout << "Deleted element at position " << position << "." << endl;
            return;
        }

        Node* temp = head;
        for (int i = 1; i < position - 1; ++i) {
            if (temp == nullptr) {
                cout << "Position out of bounds!" << endl;
                return;
            }
            temp = temp->next;
        }

        if (temp->next == nullptr) {
            cout << "Position out of bounds!" << endl;
            return;
        }

        Node* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
        cout << "Deleted element at position " << position << "." << endl;
    }

    // -------------------------------------------------------------------------
    // Searches for a value in the list and reports its position
    // -------------------------------------------------------------------------
    void search(int value) {
        Node* temp = head;
        int position = 1;
        while (temp != nullptr) {
            if (temp->data == value) {
                cout << "Element " << value << " found at position " << position << "." << endl;
                return;
            }
            temp = temp->next;
            position++;
        }
        cout << "Element " << value << " not found in the list." << endl;
    }

    // -------------------------------------------------------------------------
    // Displays the entire list
    // -------------------------------------------------------------------------
    void display() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        Node* temp = head;
        cout << "List contents: ";
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // -------------------------------------------------------------------------
    // Displays the list in reverse order (using recursion)
    // -------------------------------------------------------------------------
    void displayReverse() {
        if (head == nullptr) {
            cout << "List is empty!" << endl;
            return;
        }
        cout << "List in reverse: ";
        displayReverseHelper(head);
        cout << endl;
    }

    // Helper function for displayReverse (recursive)
    void displayReverseHelper(Node* node) {
        if (node == nullptr)
            return;
        displayReverseHelper(node->next);
        cout << node->data << " ";
    }

    // -------------------------------------------------------------------------
    // Reverses the entire linked list (iterative)
    // -------------------------------------------------------------------------
    void reverseLink() {
        if (head == nullptr || head->next == nullptr) {
            cout << "List is empty or contains one element. No need to reverse." << endl;
            return;
        }
        Node* prev = nullptr;
        Node* curr = head;
        Node* next = nullptr;

        while (curr != nullptr) {
            next = curr->next;   // Save next node
            curr->next = prev;   // Reverse current node's pointer
            prev = curr;         // Move prev forward
            curr = next;         // Move curr forward
        }
        head = prev;  // Update head to new front
        cout << "List has been reversed." << endl;
    }

    // -------------------------------------------------------------------------
    // Destructor: Frees all allocated memory when the LinkedList is destroyed
    // -------------------------------------------------------------------------
    ~LinkedList() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

// -----------------------------------------------------------------------------
// Main function: Provides a menu-driven interface for interacting with the list
// -----------------------------------------------------------------------------
int main() {
    LinkedList list;
    int choice, value, position;

    do {
        cout << "\nMenu:\n";
        cout << "1. Insert Beginning\n";
        cout << "2. Insert End\n";
        cout << "3. Insert Position\n";
        cout << "4. Delete Beginning\n";
        cout << "5. Delete End\n";
        cout << "6. Delete Position\n";
        cout << "7. Search\n";
        cout << "8. Display\n";
        cout << "9. Display Reverse\n";
        cout << "10. Reverse Link\n";
        cout << "11. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert at beginning: ";
                cin >> value;
                list.insertBeginning(value);
                break;
            case 2:
                cout << "Enter value to insert at end: ";
                cin >> value;
                list.insertEnd(value);
                break;
            case 3:
                cout << "Enter value and position to insert: ";
                cin >> value >> position;
                list.insertPosition(value, position);
                break;
            case 4:
                list.deleteBeginning();
                break;
            case 5:
                list.deleteEnd();
                break;
            case 6:
                cout << "Enter position to delete: ";
                cin >> position;
                list.deletePosition(position);
                break;
            case 7:
                cout << "Enter value to search: ";
                cin >> value;
                list.search(value);
                break;
            case 8:
                list.display();
                break;
            case 9:
                list.displayReverse();
                break;
            case 10:
                list.reverseLink();
                break;
            case 11:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
    } while (choice != 11);

    return 0;
}
