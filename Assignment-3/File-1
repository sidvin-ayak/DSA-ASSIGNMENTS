//Program to implement ListADT using an array of size 5
#include<cstdio>
#include<iostream>

using namespace std;

class list{

    private:

        int arr[5];
        int size;
        int current=0;

    public:

        list();
        void insertbeg(int);
        void insertend(int);
        void insertpos(int,int);
        void deletebeg();
        void deleteend();
        void deletepos(int);
        void search(int);
        void display();
        void rotate(int);
};

//Main body of the program begins here

int main(){
    list a;
    int choice=0;
    int pos;
    int val;
    int k;

    do{
        printf("\nWelcome to the Menu\nChoose the function of your choice from the list of functions specified below:\n1.Insert Beginnning\n2.Insert End\n3.Insert Position\n4.Delete Beginning\n5.Delete End\n6.Delete Position\n7.Search\n8.Display\n9.Rotate\n10.Exit\nYour Choice:\t");
        scanf("%d",&choice);
        switch(choice){

            //When the input received is 1, insertbeg() function is implemented
            case 1:

            printf("\nEnter the number to be inserted in the beginning:\t");
            scanf("%d",&val);
            a.insertbeg(val);
            break;
            
            //When the input received is 2, insertend() function is implemented
            case 2:

            printf("\nEnter the number to be inserted at the end:\t");
            scanf("%d",&val);
            a.insertend(val);
            break;

            //When the input received is 3, insertpos() is implemented
            case 3:

            printf("\nEnter the number to be inserted:\t");
            scanf("%d",&val);
            printf("\nEnter the position at which the given value has to be inserted at:\t");
            scanf("%d",&pos);
            a.insertpos(val,pos);
            break;

            //When the input received is 4, deletebeg() is implemented
            case 4:

            a.deletebeg();
            break;

            //When the input received is 5, deleteend() is implemented
            case 5:

            a.deleteend();
            break;

            //When the input received is 6, deletepos() is implemented
            case 6:

            printf("\nEnter the position to be deleted:\t");
            scanf("%d",&pos);
            a.deletepos(pos);
            break;

            //When the input received is 7, search() is implemented
            case 7:

            printf("\nEnter the value to be searched:\t");
            scanf("%d",&val);
            a.search(val);
            break;

            //When the input received is 8, display() is implemented
            case 8:

            a.display();
            break;

            //When the input received is 9, rotate() is implemented
            case 9:

            printf("\nEnter the number of times the array is to be rotated:\t");
            scanf("%d",&k);
            a.rotate(k);
            break;

        }
    } while (choice==10);   
     
}


void list::insertbeg(int val){

    if (size == 5){

        printf("\nInsertion is not possible as the list is full.");
    }
    else{

        for (int i = (size - 1); i >= 0; i--){

            arr[i + 1] = arr[i];
        }
        arr[0] = val;
        size++;
    }
}

void list::insertend(int val){

    if (size == 5){

        printf("\nInsertion is not possible as the list is full.");
    }
    else{

        arr[size] = val;
        size++;
    }
}

void list::insertpos(int val, int pos){

    if (size == 5){

        printf("\nInsertion is not possible as the list is full.");
    }
    else{

        if ((pos < 1) || (pos > (size + 1))){

            printf("\nInvalid position.");
        }
        else{

            for (int i = (size -1); i >= pos - 1; i--){

                arr[i + 1] = arr[i];
            }
            arr[pos - 1] = val;
            size++;

        }
    }
}

void list::deletebeg(){

    for (int i = 0; i < size; i++){

        arr[i] = arr[i + 1];
    }
    size--;
}

void list::deleteend(){

    size--;
}


void list::rotate(int k){

    for (int j = 0; j < k; j++){

	int temp = arr[size - 1];
        for (int i = (size - 1); i > 0; i--){

            arr[i] = arr[i - 1];
        }
        arr[0] = temp;
    }
}



void list::deletepos(int pos){

    if ((pos < 1) || (pos > size)){

            printf("\nInvalid position.");
    }
    else{

        for (int i = (pos - 1); i < size; i++){

            arr[i] = arr[i + 1];
        }
        size--;

    }
}

void list::search(int val){

    int flag = 0;
    if (size == 0){

        printf("\nList is empty.");
    }
    else{

        for (int i = 0; i < size; i++){

            if (arr[i] == val){

                printf("\n%d was found at index %d.", val, i);
                flag = 1;
            }
        }
        if (flag == 0){

            printf("\n%d was not found in the list.", val);
        }
    }
}

list::list(){
    
    size = 0;
}

void list::display(){

    printf("\n");
    for (int i = 0; i < size; i++){

        printf("\t%d", arr[i]);
    }
}
